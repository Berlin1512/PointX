// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using PointX.Entities.Context;

#nullable disable

namespace PointX.Migrations
{
    [DbContext(typeof(PointXDbContext))]
    partial class PointXDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("PointX.Entities.District", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ProvincesId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProvincesId");

                    b.ToTable("Districts");
                });

            modelBuilder.Entity("PointX.Entities.Nation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Nations");
                });

            modelBuilder.Entity("PointX.Entities.Province", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("NationsId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("NationsId");

                    b.ToTable("Provinces");
                });

            modelBuilder.Entity("PointX.Entities.Street", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Streets");
                });

            modelBuilder.Entity("PointX.Entities.Ward", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("DistrictId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("DistrictId");

                    b.ToTable("Wards");
                });

            modelBuilder.Entity("PointX.Entities.WardStreet", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("StreetsId")
                        .HasColumnType("int");

                    b.Property<int>("WardsId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("StreetsId");

                    b.HasIndex("WardsId");

                    b.ToTable("Ward_Street");
                });

            modelBuilder.Entity("PointX.Entities.District", b =>
                {
                    b.HasOne("PointX.Entities.Province", "Provinces")
                        .WithMany("Districts")
                        .HasForeignKey("ProvincesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Provinces");
                });

            modelBuilder.Entity("PointX.Entities.Province", b =>
                {
                    b.HasOne("PointX.Entities.Nation", "Nations")
                        .WithMany("Provinces")
                        .HasForeignKey("NationsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Nations");
                });

            modelBuilder.Entity("PointX.Entities.Ward", b =>
                {
                    b.HasOne("PointX.Entities.District", null)
                        .WithMany("Wards")
                        .HasForeignKey("DistrictId");
                });

            modelBuilder.Entity("PointX.Entities.WardStreet", b =>
                {
                    b.HasOne("PointX.Entities.Street", "Streets")
                        .WithMany("Ward_Street")
                        .HasForeignKey("StreetsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PointX.Entities.Ward", "Wards")
                        .WithMany("Ward_Street")
                        .HasForeignKey("WardsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Streets");

                    b.Navigation("Wards");
                });

            modelBuilder.Entity("PointX.Entities.District", b =>
                {
                    b.Navigation("Wards");
                });

            modelBuilder.Entity("PointX.Entities.Nation", b =>
                {
                    b.Navigation("Provinces");
                });

            modelBuilder.Entity("PointX.Entities.Province", b =>
                {
                    b.Navigation("Districts");
                });

            modelBuilder.Entity("PointX.Entities.Street", b =>
                {
                    b.Navigation("Ward_Street");
                });

            modelBuilder.Entity("PointX.Entities.Ward", b =>
                {
                    b.Navigation("Ward_Street");
                });
#pragma warning restore 612, 618
        }
    }
}
